#!/bin/sh
# Script for increasing data trasnfer speeds from remote cluster to local
# workstation by routing through ARL cluster. This is a temparary fix for
# an issue that is currenlty being investigated. 


middle=excalibur
middle_dir=\\\${WORKDIR}/.DataTransferArea_TMP

version=0.09

help_ani()
{
  echo "
        Faster scp option for ARL-APG by going through $middle
        
        Requires 2 inputs: 
        
        [[user@]host1:]file1 ... [[user@]host2:]file2
        
        Always uses recursive copy flag: -r

        
        "
  exit 1
}

# If no inputs--display help
if [ $# -ne "2" ]; then
  help_ani
fi

Arg1=$1
Arg2=$2

# file 1 arguments
if [[ $Arg1 == *":"* ]]; then
   host1="${Arg1%:*}:"
   file1=${Arg1##*:}
   machine1="${Arg1%:*}"  
   transfer1="scp"  
   size="ssh $machine1 \"du -chs ${file1}\""   
else
   host1=""
   file1=$Arg1
   machine1="local"
   transfer1="scp"
   size="du -chs ${file1}"
fi

file1name=$file1
while [[ $file1name == *"/"* ]]; do
   file1name=${file1name##*/}
done

# file 2 arguments
if [[ $Arg2 == *":"* ]]; then
   host2="${Arg2%:*}:"
   file2=${Arg2##*:}
   machine2="${Arg2%:*}"   
   transfer2="scp"   
else
   host2=""   
   file2=$Arg2
   machine2="local" 
   transfer2="scp"  
fi

file2name=$file2
while [[ $file2name == *"/"* ]]; do
   file2name=${file2name##*/}
done

echo " " 
echo "Performing SCP (v${version}) ${host1}${file1} ${host2}${file2}"
echo " " 

Timestamp=`date +%Y%m%d%H%M%S`
Out=".tmp_transfer_$Timestamp"


# Setup
T0="$(date +%s)" 
echo "ssh ${middle} \"mkdir -p ${middle_dir}/${Timestamp}\""
eval "ssh ${middle} \"mkdir -p ${middle_dir}/${Timestamp} ; echo ${middle_dir}/${Timestamp} \" >& $Out"
eval ${size} >& ${Out}_filelist 
middle_dir_remote=`tail -n 1 ${Out} | awk '{print $1;}'`
file_size=`tail -n 1 ${Out}_filelist | awk '{print $1;}'`
Tsetup="$(($(date +%s)-T0))"
middle_dir_remote=${middle_dir_remote%/*}

# Transfer 1
T="$(date +%s)"
echo "${transfer1} -r ${host1}${file1} ${middle}:${middle_dir_remote}/${Timestamp}/"
${transfer1} -r ${host1}${file1} ${middle}:${middle_dir_remote}/${Timestamp}/ >& $Out
T1="$(($(date +%s)-T))"

# Transfer 2
T="$(date +%s)"
echo "${transfer2} -r ${middle}:${middle_dir_remote}/${Timestamp}/${file1name} ${host2}${file2}"
${transfer2} -r ${middle}:${middle_dir_remote}/${Timestamp}/${file1name} ${host2}${file2} >& $Out
T2="$(($(date +%s)-T))"

# Clean-up
T="$(date +%s)"
echo "ssh ${middle} \"rm -rf ${middle_dir_remote}/${Timestamp};rmdir ${middle_dir_remote}\""
ssh ${middle} "rm -rf ${middle_dir_remote}/${Timestamp};rmdir ${middle_dir_remote}" >& $Out
Tclean="$(($(date +%s)-T))"
rm ${Out} ${Out}_filelist 

Ttot="$(($(date +%s)-T0))"
printf "               File Size: %s\n" ${file_size}
printf "          Total Transfer: %02d:%02d\n" "$(($Ttot/60%60))" "$(($Ttot%60))"
printf "%10s to %10s: %02d:%02d\n"  "$machine1"  "$middle"    "$(($T1/60%60))" "$(($T1%60))"
printf "%10s to %10s: %02d:%02d\n"  "$middle"    "$machine2"  "$(($T2/60%60))" "$(($T2%60))"
printf "                   setup: %02d:%02d\n" "$(($Tsetup/60%60))" "$(($Tsetup%60))"
printf "                clean up: %02d:%02d\n" "$(($Tclean/60%60))" "$(($Tclean%60))"


