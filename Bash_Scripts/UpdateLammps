#!/bin/sh

Version=0.01

# help guide
help_ani()
{
  printf '
  UpdateLammps (version: %s) 
  Bash script that updates LAMMPS executibles on the following machines:
  
  ' ${Version}

  printf '%s|' "${machine_list[@]}"; echo

  printf ' 
  Usage:  UpdateLammps (-clean)

  Optional arguments: 
  
  -clean   : will force a "make clean-all" before compiling

' 
exit 1
}


#############  General Default Values ############# 

machine_list=("conrad" "gordon" "shepard" "armstrong" "haise" "kilrain" "excalibur" "spirit" "garnet")
Clean=0
now=`date +"%Y_%m_%d"`

while (($#)); do
    case "$1" in
        -clean) Clean=1;;
        *)  help_ani ;;
    esac
    shift
done


if [ "$Clean" == "1" ]; then
    Clean_cmd="make clean-all"
else
    Clean_cmd="" 
fi


## Update Local Versions 

echo "Working on local versions ..."

cd /home/scoleman/Applications/LAMMPS/lammps_devel/src
git pull  >& ~/.trash_update
make package-update >& ~/.trash_update
cp ~/Applications/My_GitHub/USER-DIFFRACTION/src/devel/* ./
version=`awk -F\" '{print \$(NF-1)}' version.h  | sed -e 's/ /_/g'`
make mpi -j12 >& ~/.trash_update

rm ~/Applications/bin/lmp_devel
rm ~/Applications/bin/lmp_diff 
ln -s /home/scoleman/Applications/LAMMPS/lammps_devel/src/lmp_mpi ~/Applications/bin/lmp_diff 
ln -s /home/scoleman/Applications/LAMMPS/lammps_devel/src/lmp_mpi ~/Applications/bin/lmp_devel
cp lmp_mpi ~/Applications/bin/lmp_versions/lmp_diff_${now}_v${version}

echo "   ... successfully completed devel branch"

cd /home/scoleman/Applications/LAMMPS/lammps_devel/src
git pull  >& ~/.trash_update
make package-update >& ~/.trash_update
cp ~/Applications/My_GitHub/USER-DIFFRACTION/src/devel/* ./
version=`awk -F\" '{print \$(NF-1)}' version.h  | sed -e 's/ /_/g'`
make mpi -j12 >& ~/.trash_update

rm ~/Applications/bin/lmp_stable
ln -s /home/scoleman/Applications/LAMMPS/lammps_devel/src/lmp_mpi ~/Applications/bin/lmp_stable
cp /home/scoleman/Applications/LAMMPS/lammps_devel/src/lmp_mpi ~/Applications/bin/lmp_versions/lmp_stable_${now}_v${version}

echo "   ... successfully completed stable branch"


## Update Remote Versions

cmdfile=tmp_file
cat > ~/.${cmdfile} << _EOF_
source ~/.bashrc; 
source ~/.profile; 
cd ~/Lammps/Diffraction/src;  
git pull
version=\`awk -F\" '{print \$(NF-1)}' version.h  | sed -e 's/ /_/g'\`
make package-update
cp ~/My_GitHub/USER-DIFFRACTION/src/devel/* ./ 
MakefileList=\`ls lmp_*\`
MakefileList=(\$MakefileList)
${Clean_cmd}
for element in \${MakefileList[@]}; do    
    Makefile=\${element#*lmp_}
    Makefile=\`echo \$Makefile | sed -r "s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"\`
    eval "make \${Makefile} -j12" 
    if [[ \`echo \${Makefile} | grep -c mic\` -eq "1" ]] ; then 
        rm ~/Public/bin/lmp_diff_mic
        ln lmp_\${Makefile} ~/Public/bin/lmp_diff_mic
        cp lmp_\${Makefile} ~/bin/lmp_versions/lmp_diff_mic_${now}_v\${version}
    else 
        rm ~/Public/bin/lmp_diff
        ln   lmp_\${Makefile} ~/Public/bin/lmp_diff
        cp   lmp_\${Makefile} ~/bin/lmp_versions/lmp_diff_${now}_v\${version}
    fi
done

_EOF_

chmod 777 ~/.${cmdfile}

for machine in ${machine_list[*]}; do
    echo "Working on $machine ... "
    scp ~/.${cmdfile} ${machine}:~/.${cmdfile} >& ~/.trash_file
    ssh ${machine} "~/.${cmdfile} ; rm ~/.${cmdfile}" >& ~/.trash_file_$machine
    nUpdate=`grep "size ../lmp_" ~/.trash_file_$machine  | wc -l`
    echo "   ... successfully updated $nUpdate LAMMPS executables"
    rm ~/.trash_file_$machine

done

rm ~/.trash_file

